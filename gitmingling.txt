$ git config  --global user.name "yagering"
$ git config  --global user.email "zya21320@gmail.com"
git init
cd :D
cd git
cd git1
pwd 命令是用于显示当前的目录
git add gitmingling.txt
git status
git commit -m "git命令"
git log
git reset --hard HEAD^          一个^回到上一个版本
git reset --hard HEAD~100    回到100个版本前
git diff gitmingling.txt            查询增加的内容
cat document.txt                    再来查看下 readme.txt内容
git reflog 		               获取版本号
git reset --hard 版本号 退回相应的版本号
git checkout document.txt  可以丢弃工作区的修改（未add和commit，然后取消修改）
	等同效果	           把document.txt文件在工作区做的修改全部撤销
git restore document.txt     可以丢弃工作区的修改

git add b.txt
git commit -m "添加b.txt"
rm b.txt            delete删除b.txt文件
在删除之后并未commit，还可以恢复删除的文件
git restore b.txt / git checkout b.txt

本地和远程建立连接-本地文件上传到远程进行备份
$ git remote add origin https://github.com/yagering/git1.git
我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。-以后添加后的简化命令git push origin master
$ git push -u origin master

远程和本地建立连接-以便把远程文件克隆到本地
1.创建git2仓库-并自动生成readme.md文件
2.git clone https://github.com/yagering/git2.git --使用命令克隆一个本地仓库

创建与合并分支
在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
1.创建dev分支，然后切换到dev分支上。
git checkout -b dev 创建并切换分支---git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令 git branch dev---- git checkout dev
git branch 查看当前的分支,会列出所有的分支，当前分支前面会添加一个星号。

git checkout master/dev  切换分支master/dev---cat document.txt
现在我们可以把dev分支上的内容合并到分支master上了
git merge dev ---在master分支上合并dev分支内容
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

合并完成后，我们可以接着删除dev分支了
git branch -d dev

如何解决冲突？
fenzhi1--分支增加888888
master--主支增加999999
合并分支发生冲突
git merge fenzhi1
cat document.txt--Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，>>>>>fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
需要更改成正常、master分支内容一样，不然无法切换分支
git add document.txt
git commit -m "conflict fixed"
执行以上代码后模式由master|merging--> master---并可以切换分支。

分支策略
1.创建一个dev分支。
2.修改readme.txt内容。
3.添加到暂存区。
4.切换回主分支(master)。
5.合并dev分支，使用命令 git merge –-no-ff  -m “注释” dev
6.查看历史记录-git log --graph --pretty=oneline --abbrev-commit
分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。

七：bug分支：
　　在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
　　比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev/master分支上的工作还没有提交。比如如下：
并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：

可以使用git stash --作用将当前工作现场隐藏起来。

换另外一个工作修bug
git checkout -b issue-404
修改bug
git add document.txt
git commit -m "fix bug 404"
git checkout master

git merge --no-ff -m "merge bug fix 404" issue-404合并分支issue-404内容
git branch -d issue-404
现在，我们回到master上干活了。--找回现场隐藏的工作。
git stash list 查看隐藏的工作列表。
git stash //暂存正在进行的工作
git pull
git stash pop //合并暂存的代码
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法
1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。